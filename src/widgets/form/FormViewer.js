import React, { useState } from 'react';
import Utils from '../../services/Utils';
import { withTheme } from '@rjsf/core';
import { Theme as AntDTheme } from '@rjsf/antd';
import { Button, message } from 'antd';
import { widgets } from '../../editors/OAPIV3FormGenerator/CustomWidget';
import {
  CustomArrayFieldTemplate,
  fields,
  fieldsView
} from '../../editors/OAPIV3FormGenerator/CustomField';
import { json } from 'generate-schema';
import CustomFieldTemplateViewer from '../../editors/OAPIV3FormGenerator/CustomFieldTemplateViewer';
import CustomFieldTemplate from '../../editors/OAPIV3FormGenerator/CustomFieldTemplate';

const Form = withTheme(AntDTheme);

function FormViewer(props) {
  const [showButton, setShowButton] = useState(false);

  const util = Utils();

  let formData;
  let schema;
  let schemaReal = {};

  if (props.CRD) {
    schema = json(props.resource[props.show]);
    delete schema.$schema;

    try {
      schemaReal = util.OAPIV3toJSONSchema(
        props.CRD.spec.validation.openAPIV3Schema
      ).properties;
      if (props.origResource)
        schemaReal = schemaReal.spec.properties[props.show];
      else schemaReal = schemaReal[props.show];
      /**
       * This set the real schema properties to the leaves
       * of the autogenerated schema
       */
      util.setRealProperties(schema, schemaReal);
    } catch {}

    formData = props.resource[props.show];
  } else {
    schema = json(props.resource[props.show]);
    delete schema.$schema;
    formData = props.resource[props.show];
  }

  const submit = value => {
    let item = {};

    item[props.show] = value.formData;
    if (props.origResource) {
      if (props.onDotNotation)
        item = Utils().fromDotToObject(item, props.origResource);
      else item = Utils().replaceObject(item, props.show, props.origResource);
    }

    let promise;

    if (props.CRD) {
      promise = window.api.updateCustomResource(
        props.CRD.spec.group,
        props.CRD.spec.version,
        props.resourceNamespace,
        props.CRD.spec.names.plural,
        props.resourceName,
        item
      );
    } else {
      promise = props.updateFunc(
        props.resourceName,
        props.resourceNamespace,
        item
      );
    }

    setShowButton(false);

    promise.catch(error => {
      console.error(error);
      message.error('Could not update the resource');
    });
  };

  return (
    <div key={props.show}>
      <Form
        uiSchema={props.onEditor ? {} : { 'ui:disabled': true }}
        schema={schema}
        formData={formData}
        onChange={() => {
          if (!showButton && !props.readonly) setShowButton(true);
        }}
        fields={props.readonly || props.onEditor ? fields : fieldsView}
        FieldTemplate={
          props.readonly || props.onEditor
            ? CustomFieldTemplate
            : CustomFieldTemplateViewer
        }
        ArrayFieldTemplate={CustomArrayFieldTemplate}
        widgets={widgets}
        onSubmit={submit}
      >
        {showButton ? (
          <Button type="primary" htmlType={'submit'} style={{ marginTop: 10 }}>
            Save changes
          </Button>
        ) : (
          <div />
        )}
      </Form>
    </div>
  );
}

export default FormViewer;
